# name: Test FastAPI API

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# jobs:
#   test-api:
#     runs-on: ubuntu-latest

#     steps:
#     # Configuración inicial del repositorio
#     - name: Checkout code
#       uses: actions/checkout@v3

#     # Configuración de Python y dependencias
#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: 3.9

#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r src/nrms_ml_ops/requirements_backend.txt

#     # Iniciar FastAPI (backend.py)
#     - name: Start FastAPI app
#       working-directory: src/nrms_ml_ops  # Cambiar si backend.py está en otro directorio
#       run: |
#         nohup uvicorn backend:app --host 127.0.0.1 --port 8000 &
#       env:
#         PYTHONUNBUFFERED: 1  

#     # Esperar a que la API esté activa
#     - name: Wait for API to be ready
#       run: |
#         echo "Waiting for API to be ready..."
#         sleep 10
#         curl -X GET http://127.0.0.1:8000/docs || exit 1

#     # Enviar archivo test.parquet a la API
#     - name: Test API with test.parquet
#       run: |
#         echo "Sending test.parquet to API..."
#         curl -X POST http://127.0.0.1:8000/evaluate/ \
#           -H "Content-Type: multipart/form-data" \
#           -F "file=@data/processed/test.parquet" || exit 1

#     # Validar la respuesta de la API
#     - name: Test API endpoint with Python
#       run: |
#         echo "Running API tests with Python..."
#         python -c "
#         import httpx
#         response = httpx.post(
#             'http://127.0.0.1:8000/evaluate/',
#             files={'file': open('src/nrms_ml_ops/test.parquet', 'rb')}
#         )
#         assert response.status_code == 200, f'Failed: {response.status_code} {response.text}'
#         print('Test passed successfully!')"
